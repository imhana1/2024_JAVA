메소드의 중복 정의(메소드의 다형성. Method Overloading)
    하나의 클래스에 같은 이름의 메소드를 다수 정의하는 것.
    (클래스가 다를 경우 같은 이름을 사용하는 것은 문제가 되지 않음)

    자바의 다형성(객체)
        상속과 연계되는 개념. 부모 클래스와 자식 클래스 존재.
        각 클래스로 인스턴스 생성. 인스턴스의 위치정보(주소) 저장하는
        변수를 인스턴스 참조 변수라고 한다.
        Scanner scan = new Scanner(System.in);
        scan은 인스턴스 참조 변수 = 인스턴스를 저장하고 있는 변수.
        즉, 인스턴스의 이름.
        부모 인스턴스용 이름을 자식 인스턴스에서도 사용할 수 있다.
        부모 클래스로 만든 변수에 자식 인스턴스를 저장할 수 있다.

메소드 오버로딩(Overloading)
    성립 조건)
    1) 메소드 이름은 동일하게 작성한다.
    2) 매개변수의 개수 또는 자료형이 달라야 한다.(메소드 구분법)
    3) 반환형은 고려하지 않는다.

    대표적인 오버로딩의 예) System.out.println()

    (경험상. 메소드 오버로딩을 사용할 경우는 많지 않다...)

생성자(Constructor)
    특수한 목적을 갖는 메소드.
    인스턴스가 생성될 때만 호출되는 메소드.
    개발자가 임의로 호출할 수 없는 메소드.
    목적은 인스턴스 멤버 변수들의 초기화와 기타 생성 시 해야할 작업 처리.

    특징)
    1. 클래스의 이름과 동일한 이름을 사용.(대소문자까지 동일)
    2. 반환형을 붙이지 않는다.(return을 사용하지 않는다.)
    3. 모든 클래스는 최소 하나 이상의 생성자가 있어야 한다.

    사용 문법>
    클래스명 인스턴스명 = new 생성자([파라미터목록]);

    파라미터목록이 없는 생성자를 기본 생성자(Default Constructor)라고
    한다. 개발자가 아무런 생성자를 작성하지 않은 경우, 컴파일러가
    자동으로 기본 생성자를 작성해 준다.

    작성 시 고려사항
        접근제어자는 보통 public을 사용.
        public이 아닌 경우 인스턴스 생성에 제약을 줄 수 있음.
        (Singleton 패턴 : 전체 프로그램에서 인스턴스를 하나만 쓰도록 제한)

생성자 오버로딩
    생성자를 여러개 작성할 수 있다. 단, 매개변수의 개수가 달라야 한다.

this 키워드
    인스턴스를 구별하기 위한 방법. 일종의 참조변수
    인스턴스 자신의 주소를 스스로 저장하고 있음(힙 영역에 여러개가
    생성될 수 있기 때문에)
    1) 멤버변수 앞에 붙여서 지역변수와 멤버변수를 구분. (this.멤버변수)
    2) 생성자 안에서 다른 생성자를 호출할 때 사용.(this())

프로그래밍에 '반드시'는 없습니다.(예외는 있습니다. ^^;;)
- 생성자를 반드시 쓸 필요는 없습니다.
- 'this.멤버변수'를 반드시 쓸 필요는 없습니다.(쓰면 좋아요~)
- this()를 반드시 쓸 필요는 없습니다.
- 메소드 오버로딩을 반드시 쓸 필요는 없습니다.
- 디자인 패턴도 반드시 쓸 필요는 없습니다.(쓰면 너무~ 좋아요~)

toString 메소드 : 특수 목적을 갖는 메소드.
    인스턴스를 출력할 때 대신 출력될 문장을 작성하는 메소드.
    멤버변수의 내용을 출력할 때 사용하면 좋다.

  문제> 상품 클래스에 생성자를 적용해서 작성해 보자.

프로그램 골격, MVC 패턴을 활용한 주소 관리 프로그램(주소록)
데이터 : 이름, 연락처, 주소, 생일
메뉴 구성
1. 주소 입력
2. 주소 전체 출력
3. 주소 검색(개별 출력)
    3.1 이름
    3.2 연락처
    3.3 생일
4. 주소 수정
5. 주소 삭제
0. 종료

