JDBC(Java DataBase Connectivity) 프로그래밍
    자바 프로그램과 DBMS를 연동.
    DB에 직접 접근하여 사용하는 것이 아니라 DBMS(MySQL)와
    네트워크로 연결하여 데이터 처리를 요청(Query, Request)하고
    결과를 응답(Response)받는 구조.

    DB 사용 : 사용자 <-> workbench(DBeaver) <-> MySQL(DBMS) <-> DB(공간)
    JDBC 프로그래밍 : 사용자 <-> 프로그램 <-> MySQL <-> DB

참고) Lombok 라이브러리(3rd Party Libraries)
    DTO, VO 등의 클래스를 작성할 때 도움을 주는 라이브러리.
    Getter, Setter, toSTring(), 생성자 등을 자동으로 작성해준다.
    멤버변수만 작성하면 나머지 코드는 알아서 처리해줌.
    프로젝트별로 따로따로 추가해야 사용할 수 있다.

    외부 라이브러리(jar) 파일을 프로젝트 포함시키는 방법
    1. File > Project Structure... 실행.
    2. Libraries 선택
    3. '+' 버튼 클릭 > 'Java' 선택.
    4. 포함시킬 라이브러리 jar 파일을 찾아서 확인.

JDBC 처리 단계
1. DBMS용 드라이버 로드(DriverManager에게 드라이버 전달)
2. DriverManager를 통한 DBMS 접속(IP, 계정, 비밀번호) - Connection
3. Query Request와 Response 처리 - Statement
4. 접속 해제 - Connection.close()

1번 초기 한번만 수행. 2~4번은 매 작업마다 반복적으로 수행.

예) 테이블에 데이터를 삽입(insert) 후 조회(select)
드라이버 로드 ->
Connection(접속) -> insert 실행 -> close : 삽입(수정, 삭제)
Connection -> select 실행 -> 결과처리 -> close : 조회

DBMS 접속용 코드
1. 드라이버 로드 : Class.forName(패키지.드라이버클래스)
    DriverManager(DM)에게 드라이버 클래스를 넘기는 코드.
    DM이 클래스이름으로 라이브러리로부터 해당 클래스를 찾아와서
    드라이버 인스턴스를 생성하고 접속(Connection)에 사용.
    즉, DM이 DB와의 연결 작업을 한다.
2. DBMS(MySQL)와의 접속 처리 : DriverManager.getConnection()
    싱글턴 방식. getConnection의 파라미터로 IP, 사용자계정,
    비밀번호를 입력.

Connection 수립 시 필요한 내용
1) URL - jdbc:mysql://IP주소:포트번호/저장공간(scheme)
2) 계정 - DB에 생성한 사용자
3) 비밀번호 - 해당 계정(사용자)의 비밀번호(설치 시 입력한 비밀번호 아님!)

select 처리 시 필요한 객체 - ResultSet class
    데이터를 테이블형태로 처리하는 객체. DB 결과값을 저장하는 객체.


회원 관리 프로그램
메뉴>
1. 회원 정보 입력
2. 회원 정보 출력(전체)
3. 회원 정보 검색(아이디) > 내용 출력 후 > 수정/삭제 메뉴
0. 종료

PreparedStatement class
    Statement class의 파생 클래스로, Statement는 완성된
    쿼리문을 사용하지만, PreparedStatement는 미완성된
    쿼리문을 사용한다.
    '?' : 데이터가 들어갈 부분에 사용.
    setXXX() : '?'부분에 들어갈 데이터를 지정하는 메소드.

    미완성 쿼리문 : insert into table values (?, ?, ?, ?)

    회원 정보 저장용 완성 쿼리문 <Statement>용 예)
    uid = "user01";
    upass = "1234";
    uname = "홍길동";
    uage = 20;
    uaddr = "인천시 동구";
    String query = "insert into usertbl values " +
                   "('" + uid + "', '" +
                   upass + "', '" +
                   uname + "', " +
                   uage + ", '" +
                   uaddr + "')";

    -> insert into usertbl values
        ('user01', '1234', '홍길동', 20, '인천시 동구')