자바의 제어자
제어자란 클래스, 변수, 메소드의 선언부에 사용되어 부가적인 의미를 부여.
하나의 대상에 여러 개의 제어자를 조합하여 사용할 수 있으나 접근 제어자는
하나만 쓸 수 있다.
1. 접근 제어자
    1) public
    2) protected
    3) default
    4) private
2. 기타 제어자
    1) static
    2) abstract
    3) final
    4) 그 외...(다루지 않음)

사용 규칙)
1. 접근제어자는 지역변수에 붙이지 않는다.
2. static은 지역변수에 붙이지 않는다.
3. abstract는 변수에 붙이지 않는다.

final 제어자
마지막, 변경될 수 없는
1. 클래스 앞에 붙인 경우 - 상속이 불가능한 클래스를 작성할 때.
2. 메소드 앞에 붙인 경우 - overriding(재정의)이 불가능한
                        메소드를 작성할 때.
3. 변수(멤버, 지역) 앞에 붙인 경우 - 상수를 작성할 때.

제어자 조합 규칙
1) 메소드에 static과 abstract를 함께 사용할 수 없다.
    static - 인스턴스 없이 사용 가능.
    abstract - 정의부가 없음.
2) 클래스에 abstract와 final을 함께 사용할 수 없다.
    abstract - 반드시 상속을 해야 한다.
    final - 상속을 할 수 없다.
3) abstract 메소드의 접근제어자에 private를 쓸 수 없다.
    abstract - 상속하여 재정의를 해야하는 메소드.
    private - 상속할 수 없는 멤버.
4) 메소드에 final과 private를 같이 사용할 필요는 없다.
    둘 다 상속 불가. private 하나로 처리.

Wrapper class(기본 자료형의 클래스)
Boxing과 Unboxing
일반 변수에 있는 값을 래퍼클래스에 넣는 것을 박싱.(기본형 -> 참조형)
래퍼클래스의 값을 일반 변수로 꺼내는 것을 언박싱.(참조형 -> 기본형)

    예. int a = 10;
        Integer aa = a;//boxing(인스턴스로 저장)
        int b = aa;//unboxing

컬렉션 프레임워크(Collection Framework)
대규모의 데이터를 그룹으로 묶어 관리하는 객체.
    - Collection : 데이터 처리용 여러 객체를 모아 놓은 것.(인터페이스)
    - Framework : 정형화된 프로그래밍 도구 = 라이브러리
    java.util 패키지 소속 클래스 및 인터페이스 집단.

핵심 인터페이스
1. Set : 집합. 순서가 없이 모아놓은 객체의 집합을 정의하기 위한 인터페이스.
        중복을 하용하지 않음(마지막 입력값으로 덮어씀) - HashSet, TreeSet.
2. List : 목록. 순서가 있는 객체의 집합을 정의하기 위한 인터페이스.
        순서로 구별이 되기 때문에 중복을 허용. - ArrayList, LinkedList, Stack,
        Queue 등.
3. Map : 범례. 키(key)와 값(value)의 쌍으로 구성되는 데이터 집합을 정의하기 위한
        인터페이스.(사전 형태)
        키는 중복을 허용하지 않지만, 값을 중복을 허용. - HashMap, TreeMap 등

Hash 함수 : 수학 함수. 특정 값을 생성하는 함수. 암호화, 위치(주소값) 생성.
            실행 중에는 동일한 값이 생성되지 않음.

예). HashSet<Integer> intSet = new HashSet<>();
    ArrayList<String> strList = new ArrayList<>();
    HashMap<String, String> dicMap = new HashMap<>();

...<Object> : 제네릭스(Generics)
    클래스 코드 작성 시 자료형을 지정하지 않고, 컴파일(클래스를 사용) 시
    자료형을 체크해서 지정하는 방식.

    장점 : 객체 자료형의 안정성을 높이고, 형 변환의 번거로움을 줄임.

각 인터페이스별 핵심 클래스(보편적으로 많이 사용하는 클래스)
1. HashSet - 해시 코드를 사용하여 객체를 배치. 순서가 없음.
        중복된 객체 저장 불가.

2. ArrayList - 배열 형식으로 저장하는 객체 목록 클래스.
        순서가 존재, 중복된 객체 저장 가능
3. HashMap - 해시 코드를 사용하여 객체를 배치.
        키와 값의 쌍으로 객체를 저장(키 - 문자열)

참조변수는 인터페이스로 작성하고, 인스턴스 클래스로 만들자.

Iterator 인터페이스
    Collection의 순차적인 접근 방법을 제공하는 인터페이스.
    Set의 경우 비순차적으로 저장하기 때문에 주로 활용.

    Iterator의 메소드
    1) hasNext() : 처리할 원소가 있는지 여부 확인.
            처리할 원소가 있으면 true, 없으면 false.(조건문에서 활용)
            while문에서 사용.
    2) next() : 해당 순번의 원소를 가져오는 메소드.
    3) remove() : 가져온 원소를 삭제.

    Set에서 제공하는 iterator() 메소드 : 원소를 iterator 객체로 변환.
    원소의 안전한 삭제에도 iterator를 활용.(List에서도 활용)

    객체(인스턴스)의 중복 확인
    단순 비교 : 인스턴스의 주소를 비교. 데이터의 비교는 진행되지 않음
            String에서 equals를 사용하는 이유.
    내용(멤버변수)를 확인 : equals 메소드는 Object에서 제공하는
            메소드. 이 메소드를 재정의하여 사용.
            hashCode()와 equals() 메소드를 재정의.

HashMap
    한번에 두 데이터를 한쌍으로 저장.

    사전 - 단어 : 뜻

    Map<key_object, value_object> 맵이름
        key_object : Integer, String을 주로 사용.
        value_object : 모든 객체(인스턴스)

        저장용 메소드 - put(key, value);
        읽어오기 메소드 - get(key); 결과는 value.

기타 유용한 객체들
String(문자열) 관련 메소드 (문자의 배열)
1) equals() : 두 문자열의 실제 데이터 비교.
2) concat() : 두 문자열의 결합('+'와 같음)
3) charAt(n) : 문자열 중에서 n번째 문자를 가져오는 메소드.
            결과는 char 타입.
        예) ################ 게임의 지도 데이터 처리에서 활용.
            d        #  b  #    d : 문
            #        #     #    b : 보물상자
            #     t        #    t : 함정
            ################
4) contains(str) : 'str'이 있으면 ture, 없으면 false.
5) indexOf(str[, n]) : 'str'이 있으면 시작위치를, 없으면 -1.
                n : 검색 시작 위치를 지정(생략 시 처음부터 검색)
6) split(구분자) : '구분자'에 따라 문자열을 문자열 배열로 변환
7) replace(str1, str2) : 모든 str1을 str2로 변환.
8) length() : 문자열의 길이
9) subString(st, ed) : st부터 ed 직전까지의 문자열 추출
            st, ed 정수.
            st 하나만 입력하면 st 위치부터 끝까지 추출.
     찾는 문자열부터 추출할 때는 indexOf와 함께 사용.

앞으로 배울것
StringBuffer
Random
날짜와 시간
예외처리
File 입출력
DB 연동(JDBC)
Spring Framework
React
파이썬 크롤링


