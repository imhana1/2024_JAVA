변수 > 연산자 > 제어문 > 배열 > 객체지향

제어문 (자바스크립트와 거의 동일)
1. 조건(분기) 제어문
    - if, switch
        1. if : 만약 true 라면 실행해라
            기본형 - if(조건식) {실행 문장들}
                조건식이 true일 때만 실행 문장들을 실행
            2지 선다형 - if(조건식) {실행 문장들1}
                        else {실행 문장들2}
                조건식이 true 면 실행문장들1을 실행,
                       false면 실행문장들2를 실행
            다중 선택형 - if(조건식1) {실행 문장들 1}
                        else if (조건식2) { 실행 문장들2}
                        ...
                        [else {실행 문장들}]
        2. switch : case, defaulf 문과 조합하여 사용
            형식 : switch(표현식) {
                        case "v1":
                            ...
                        case "v2":
                            ...
                        [defualt:
                            ....] - defualt는 생략가능
            }
           표현식에 사용할 수 있는 것 : 정수, 문자(char), String
2. 반복 제어문
    - for, while
        1. for : 횟수 반복에 적합한 반복 제어문
            ex. for(카운터변수초기식; 조건식; 증감식;)
                    { 실행 문장들 }
                    조건식이 true 인 동안 실행 문장들을 반복
            ex2. for(변수 : 리스트)
                    {실행 문장들}
                    리스트 항목의 개수만큼 실행 문장들을 반복
                    리스트 : 배열, ArrayList 등
                    자바스크립트의 for of 와 유사한 형태
        2. while : 횟수가 아닌 반복
            ex. while(조건식) {실행 문장들} - 조건식이 true면 실행한다
            ex2. do {실행 문장들} while(조건식); - 실행문장들을 최소 1번은 실행하도록 하는 반복문.
3. 기타 제어문
    - break, continue
        1. break - if 문을 제외한 나머지 제어문을 강제 중단.
                   반복문의 경우 if 와 조합하여 반복 종료를 위한
                   2차 조건문을 형성
        2. continue - 반복문에서만 활용
                    if 와 조합하여 특정 조건일 때 실행 문장들이 실행되지 않도로 제어
                        반복을 중단시키지는 않지만 실행문장들은 실행이 되게 함


무한 루프 : 모든 프로그램은 무한루프로 동작한다 (무한으로 반복함)
    주로 while(true) 을 사용 (무한루프 작성)
        for(;;) - 무한루프

        콘솔 프로그램의 골격
        프로그램 실행 > 타이틀(로고) 출력 > 메뉴 출력 > 메뉴 선택(입력) > 해당 메뉴 실행 > 메뉴 출력 ... (반복)
        > 메뉴 출력 > 메뉴 선택(종료) > 프로그램 종료

        객체 지향의 개념을 활용하여 작성
            - 여러 클래스로 작성하자

배열 (Array)
- 자바스크립트의 배열과 비슷함 차이점은 자바에선 같은 타입의 변수만 묶을 수 있음 (한가지),
반드시 크기를 지정해야 함. (크기 변경 불가) 크기가 남는건 가능, 넘는건 불가능함 (10칸 지정하면 11칸을 쓸 수 없음 10칸 내에서 남는건 가능)
    여러개의 변수를 묶어서 하나의 이름으로 사용하는 형태의 자료 구조 (선형 구조)
    자료 구조 (Data Structure)
        데이터의 저장 및 활용을 위한 알고리즘을 연구하는 분야
        선형 구조, 트리 구조 등 선형 - 하나의 줄로 쭉 이어나가는 , 트리- 주제의 밑으로 가지처럼 뻗어가는
    알고리즘
    수학과 컴퓨터과학에서 사용되는, 문제 해결 방법을 정의한 '일련의 단계적 절차'이자 어떠한 문제를 해결하기 위한 '동작들의 모임'
    (요즘은 유튜브에서 관련 동영상을 뽑아주는 기능이라고 알려짐)

    형식) 데이터 타입[] 배열명; - 선언형식
        데이터 타입[] 배열명 = new 데이터 타입[칸수 지정];
        ex. int[] intArray = new int[10];

    다차원 배열(2차원 배열)
    0차원 - 점 : 변수
    1차원 - 선 : 점이 모여서 선이 됨, 배열
    2차원 - 면 : 2차원 배열 (표)
        형식) int[][] 배열명 = new int[줄(행(가로)) 수][열(세로) 수];
            int[][] intTwoDe = new int[3][3];
            [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
            다차원 배열  : 배열 안에 배열이 들어가는 형태
ArrayList 클래스
- 배열 형태의 목록 객체. 크기 변경이 자유로움.
    형식) ArrayList<자료형(데이터타입)> 목록명 = new ArrayList<[자료형(생략가능]>([초기값 목록]);
        자료형(데이터 타입)은 Wrapper class 로 만들어야함
        ArrayList<Integer> intList = new ArrayList<Integer(생략가능)>();


ArrayList 활용 메소드
활용 메소드 : 목록명.메소드();
    1. 삽입 : add(값); -> 순서대로 삽입
             add(순번, 값); -> 지정된 위치 순번 위치에 삽입
    2. 읽어오기 : get(순번); -> 순번 위치의 값을 읽어옴 (가져옴)
    3. 변경 : set(순번, 새로운 값); -> 순번 위치의 값을 변경
    4. 삭제 : remove(순번|(or)값); -> 순번 위치의 값을 삭제하거나 값을 찾아서 삭제
             clear(); -> 모든 값을 삭제
    5. 크기 : size(); -> 목록에 저장한 값의 개수 (배열은 length)
    6. 위치 검색 :  indexOf(값); -> 값의 순번을 알려줌 / 값이 없으면 -1로 알려줌
    7. 존재 유무 확인 : contains(값); -> 있으면 true, 없으면 false

문제

인스턴스의 활용
    1. 생성 : new 키워드로 해당 클래스의 인스턴스를 생성
    2. 변수 또는 메소드를 활용 : 인스턴스 이름.변수 이름.메소드

Wrapper 클래스에 값을 넣는 작업 : Boxing(박싱)
Wrapper 클래스에서 값을 읽어오는 작업 : unboxing(언박싱)

ArrayList가 저장하는 데이터는 인스턴스이다.

코딩 연습 문제 - 성적 관ㄹ리 프로그램
한 반의 학생들의 점수를 입력 받아서 저장하고 총점, 평균을 구할 수 있는 프로그램
1. 프로그램의 골격을 활용하자
    메뉴) 1.점수입력, 2. 전체점수출력 3. 총점 4. 평균 0.종료
2. ArrayList 를 활용하자