

부모 클래스의 이름은 빌릴 수 있지만, 본 내용은 자식인스턴스이기 때문에 부모 참조 변수로는 사용에 제한이 있음 (mart)
부모클래스의 참조변수로는 부모클래스에 정의된 것만 사용할 수 있음
자식인스턴스의 모든 것을 사용하려면 다시 자식 클래스의 참조변수에 옮겨서(복원) 사용해야 함 - 객체의 형변환

부모 클래스의 참조변수로 저장 - up casting (자동 형변환) (부모가 자식보다 상위의 개념이여서 자식이 부모 클래스로 올라가서(up) 변환)
원래클래스의 참조변수로 저장 - down casting (강제 형변환)

instanceof 연산자 : 인스턴스가 어떤 클래스로 만든 건지를 확인하는 연산자 - (true/false)로 값이 나옴
                    조건식에서 사용.
                    ex. if (인스턴스명 instanceof 클래스명)

다형성(Polymorphism)
    1 메소드의 다형성 - 오버로드(같은 이름의 여러 메소드)
    2 참조변수의 다형성 - 한 클래스의 참조변수로 여러 클래스의 인스턴스를 저장하는 것
    참조변수의 다형성은 상속관계에서만 나타남
    부모클래스의 참조변수로 자식클래스의 인스턴스를 저장
    형식) 부모클래스명 변수 = new 자식클래스명();



추상화 (Abstract)
    알고는 있으나 정확하게 설명하기 어려운 것을 표현하는 것
    -> 추상적 표현

    개념을 정의한 객체를 작성하는 것 -> 추상화
    => 추상 클래스(Abstract Class)

    상위 클래스 에서는 정의하지 못하는 것은 선언만 한다
    상속받은 하위 클래스에서 구체적으로 정의한다

    상위 클래스에서는 정의하지 못하는 것을 메소드를 선언만 하고,
    상속받은 하위 클래스에서 구체적으로 정의하는 방식

    선언만 해 놓은 메소드를 가진 클래스를 추상 클래스라고 한다

    상위클래스(동물, Animal) - 동물은 소리를 낸다. (정의 못함)
    하위클래스(강아지, Dog) - 강아지는 멍멍 소리를 낸다 (구체화)

추상 클래스 = 미완성 설계도 => 인스턴스 생성 불가
        단, 참조변수는 작성 가능 (다형성에서 활용)
        다른 클래스를 작성하는데 도움을 주는게 목적

        메소드에는 선언부와 정의부로 구성
        반환형 메소드명(매개변수목록) -> 선언부
        {
            ....;         -> 정의부
        }
        추상메소드 형식 : 반환형 메소드명(매개변수목록);
        자료형 앞에 abstract 제어자를 붙이고 선언만 한다.
        추상 메소드는 반드시 하위 클래스에서 재정의(override)해야한다

        추상 클래스 형식)
        abstract class 클래스명 {...};
        추상 클래스의 조건은 멤버 중에 최소 하나의 추상 메소드가 있어야 한다
        (추상 메소드가 있기 때문에 추상 클래스가 된다.)

인터페이스(Interface)
    추상화 정도가 매우 심한(모든 메소드가 추상 메소드인 클래스) 추상 클래스
    (일반 메소드가 포함될 수 있다)
    인스턴스를 생성할 수 없음
    목적 - 클래스 작성의 표준을 제시하는 것

    인터페이스 = 추상메소드 + 상수(final 변수)

    작성시 interface 키워드를 사용
    문법)
    public[접근 제어자] interface 인터페이스명 {...}
    1. class 대신에 interface 사용
    2. 모든 메소드는 추상 메소드이기 때문에,
        'public abstract' 가 붙어야 함 (must)
        (public abstract 생략 가능)
    3. 모든 변수 앞에는 'public static final' 을 붙여야 한다 (must)
                        이는 생략할 수 있다
    4. 상속받는 클래스는 extends 가 아닌 implements 키워드 사용





