File 처리
    프로그램에서 발생된 데이터를 유지하는 방법
    1. 파일을 활용 - sub
    2. 데이터베이스를 활용(*) - main

    파일이란 보조 기억 장치 (하드디스크, HDD, USB 등)에 저장된 상태의 데이터 묶음
    -> 파일을 활용하려면 메모리에 적재(load)되어야 한다
    메모리에서 파일을 다루기위한 클래스 -> File class

    File class
        파일과 폴더(디렉토리, Directory)를 다루는 데 사용하는 클래스
        폴더란? 파일이나 서브폴더의 정보를 저장하고 있는 파일

    파일은 보조 기억 장치의 저장되어 있는 것이며, 파일 객체는 메모리에 생성되는것
    예를 들어, 파일 저장은 1. 메모리상에 파일 객체를 만들고, 2. 파일 객체에 내용을 추가하고, 3. 보조 기억장치에 저장하는 단계로 처리한다

    파일작업
    1. 파일 생성 : 파일 객체(인스턴스) 생성
        특정 폴더에 파일 생성할 경우 - '폴더\\ 파일명.확장자'
        이 경우 폴더가 먼저 생성되어야 한다 (동시 생성은 불가)
    2. 파일 정보 확인
    3. 파일 경로 확인
    4. 파일 삭제
    5. 파일 이름/ 경로 변경
    6. 폴더 생성
    7. 폴더 정보 확인 - 폴더 내용 보기 (파일과 서브폴더)
    8. 폴더 변경
    9. 폴더 삭제
        반드시 하위 폴더(서브 폴더)와 파일을 삭제한 후 처리해야 한다

참고. Scanner 를 사용한 여러 줄 입력

파일과 권한
    다중 사용자 운영체제 하에 사용자 별로 계정을 만들어서 파일이나 폴더의 사용(읽기, 쓰기, 실행하기)을 위한 권한을 설정할 수 있다.

파일 입출력
    파일 입력(input) : 파일로 부터 데이터를 가져오는 작업
    파일 출력(output) : 파일에 데이터를 저장하는 작업

    입출력이란 데이터의 연속된 흐름을 처리하는 것
    -> Stream
    스트림은 단방향 (한쪽으로만)
    입력용 스트림(InputStream) 과 출력용 스트림(OutputStream) 을 따로 사용한다

    필요 클래스
    1. File 클래스
    2. 파일 입출력용 스트림 클래스
        FileInputStream / FileOutputStream : byte 단위
        FileReader / FileWriter : 문자 단위
    3. 입출력용 보조 스트림 클래스
        BufferedReader / BufferedWriter : 문장/한줄 단위





