패키지와 접근 제어자
    패키지 - 클래스를 폴더 단위로 분류
            클래스까지의 경로
            import 시 패키지를 경로하여 해당 클래스를 찾을 수 있도록 하고 있다

    접근제어자
    1. public : 제한 없음
    2. protected : 같은 패키지에서는 제한 없음
                    다른 패키지인 경우 상속한 클래스에서는 접근 가능
    3. default : 같은 패키지에서는 제한 없음
                다른 패키지인 경우 접근 제한
    4. private : 같은 클래스 내부에서만 사용하도록 제한

    변수는 보호하자 (private)
    메소드는 공개 (public)

상속(Inheritance)
    부모의 형질을 자식이 물려받는 것
    -> 기존에 작성한 클래스를 재사용하여, 새로운 클래스를 작성하는 것.
    두 클래스는 조상(부모), 자손(자식) 관계를 형성(계층화)
    - 자손 클래스는 조상 클래스의 모든 멤버를 상속받음
        (예외. 생성자와 private 멤버, 패키지가 다른 경우 default 도 제외)
    - 자손의 멤버 개수는 조상보다 적을 수 없다. (예외 제외)
        : 자손의 멤버는 개수는 조상과 같거나 많다
    - 단일(다단) 상속만 허용

    상속 키워드 : extends
        새로 만들 클래스 명 뒤에 'extends 부모 클래스 명'을 작성

        class 새 클래스명 extends 부모 클래스명 {...}

    모든 클래스는 상속을 통해서 만들어 진다
    모든 클래스의 조상 클래스 : Object 클래스

    모든 클래스는 Object 클래스를 상속받아서 만들도록 되어 있다 (must)

    public class Car extends Object {...}

    항상 해야 하는 것은 생략한다 -> extends Object 를 생략

    Object 클래스의 주요 메소드 중 하나 : to String()

protected 접근 제어자는 내가 많이 쓰진 않지만 다른 개발자는 많이 쓴다
/라이브러리에서는 종종 사용되기 때문에 어떤 의지를 가지고 있는지는 알고 있으면 좋음

주로 public, private 두 가지만 사용할 예정

변수 > 연산자 > 제어문 > 배열 > 객체지향

객체 지향 프로그래밍의 특징
1. 캡슐화 : class 를 작성하는 것
    특정 목적(문제해결)을 갖는 변수와 메소드를 묶어 놓은 것 - class
    정보 은닉 - 접근 제어자를 활용 하여 보호 (변수 또는 메소드)
             노출 시킬 변수,메소드
             노출 시키면 안되는 변수, 메소드
2. 상속 : 기존 클래스로 새 클래스를 파생시킴
3. 다형성 : 같은 이름인데 내용이 다른 것
    메소트 오버로딩(한 클래스 안에서 같은 이름의 메소드를 여러개 작성)
4. 추상화 : 개념을 정의 하는 것

클래스 작성 연습
객체는 모든 사물이 대상이 됨
다양한 사물에 대한 특성을 도출하는 연습이 필요함. 회원, 제품, 동물 등 (가상환경)

메소드의 제정의 (Method Overriding, 메소드 오버라이딩)
    부모 클래스의 메소드를 자식 클래스에서 다시 작성.(덮어쓰기)

Annotation : 컴파일 되는 주석, 컴파일러에게 주는 명령어
    프레임워크 : 코드를 자동적으로 작성해주는 도구
    @Override : 이 메소드가 부모클래스 메소드를 재정의한 것이다 라는 것을 컴파일러에게 알려주는 명령

라이브러리 사용 형태
1. 인스턴스를 생성하여 사용(Scanner 등)
2. 상속 받아서 새로운 클래스를 작성하는 형태

this 와 super
    this
    1. this.멤버 - 멤버 변수와 지역(매개)변수를 구분할 때 사용
                    멤버 변수와 지역 변수 이름이 다르면 사용할 필요 없음
    2. this() - 한 생성자에서 다른 생성자를 호출할 때 사용

    super : 부모 클래스를 지칭하는 대명사
    1. super.멤버 - 부모 클래스의 멤버와 자식 클래스의 변수를 구분할 때 사용
    2. super() - 부모 클래스의 생성자를 호출할 때 사용

상속을 활용하는 방법
1. 설계 단계 부터 상속을 고려하는 것이 좋다 (어려움)
2. 필요한 클래스를 따로 작성하고,
    각 클래스의 공통적으로 사용할 수 있는 부분을 추출하여 부모 클래스로 작성 한다

상품정보 저장하는 클래스
상품 분류 : 식품, 전자제품
1. 식품
    식품 명, 단가, 수량, 유통기한, 원산지,성분
2. 전자제품
    제품 명, 단가, 수량, 일련번호, 보증 기간, 제조사

- 공통 : 상품명(식품 명, 제품 명), 단가, 수량, 기간(유통기한, 보증기간),
         생산(원산지, 제조사), 상품 번호(키)
- 개별 : 성분, 일련번호