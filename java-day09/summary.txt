    StringBuffer
        Buffer : 임시 저장소, 처리가 가능한 일정 량의 데이터가 모일 때 까지 데이터를 임시적으로 저장하는 용도의 저장소
        문자 시퀀스를 임시적으로 저장하고 가공할 수 있도록 제공된 작업 공간을 String Buffer 라고 한다
        문자 시퀀스 내의 문자를 변경하거나, 문장을 추가/삭제하는 작업의 효율성을 높이는 보조 객체
        메소드들
        1. append(str) : 버퍼에 새 문자열을 추가 (뒤에 붙임)
        2. capacity() : 용량. 버퍼의 크기
        3. length() : 문자 시퀀스의 길이
        4. delete(st,ed) : 지정된 범위의 문자들 삭제
        5. insert(idx,str) : 지정된 위치에 문자열(str) 삽입
        6. replace(st, ed, str) : 지정된 범위의 문자들을 문자열(str)로 대체 (변경)
        7. reverse() : 문자 순서를 역순으로 변경
        8. charAt(iex) : 지정된 위치의 문자 추출
        9. setCharAt(idx,char) : 지정된 위치에 문자를 변경
        10. toString() : 문자 시퀀스를 문자열로 변환, 마지막에 반드시 실행해야 함.

        생성자로 버퍼의 크기(용량) 를 지정할 수 있다.

    의사 난수 생성 : Random 객체, math.random() 메소드.
        Math.random() : 0.0 ~ 1.0 사이의 값을 생성.
        0 ~ 9 까지 생성한다 할 땐 - Math.random() * 10
        1 ~ 10 까지 생성 - (int) Math.random() * 10 + 1
            형식 : (int) Math.random() * 범위 값 + 시작 값;
        형변환을 하지 않으면 실수 값 난수 생성.

        Random class : scanner 와 사용법이 동일
            자료형(Type) 별 생성 메소드가 제공됨
            1. 정수 : random.nextInt(범위) + 시작 값
                     random.nextLong(범위) + 시작 값
            2. 실수 : random.nextFloat(범위) +  시작 값
                     random.nextDouble(범위) +  시작 값
            3. 진리 값 : random.nextBoolean()

날짜와 시간 처리
    활용할 클래스
    java.utiL 패키지 :  Date, Calendar
    java.text 패키지 : SimpleDateFormat

    Date class : 인스턴스 생성 시점에 시스템의 날짜와 시간을 초기값으로 저장하고 활용할 수 있는 클래스

    SimpleDateFormat : 날짜 정보(Date)를 지정한 형식의 문자열로 변환하는 객체
                형식 작성용 기호
                G : AD/BC 등 연호
                y : 연도,  M : 월, d : 일, E : 요일
                a : 오전/오후, h : 시(12시간 주기), m : 분, s : 초, S : 밀리 초
                H/k : 시(24시간 주기)
                w : week of year (1년 중 몇 번째 주)
                W : week of month (월 중 몇 번째 주)
                D : day of year
                F : 월의 몇 번째 주 (숫자로 출력 1 ~ 5)
                    1 - 1 ~ 7일 까지
                    2 - 8 ~ 14일 까지
                    3 - 15 ~ 21일 까지
                    4 - 22 ~ 28일 까지
                    5 - 나머지

Calender Class : 달력 클래스. Date 클래스의 보편화
            Date 클래스보다 쓰기 쉽다.
            Singleton 패턴을 사용하는 형태
                - 인스턴스를 하나만 사용하도록 강제하는 패턴.
                인스턴스를 사용하는 다른 클래스에서 new를 통해 인스턴스를 생성하지 못하게 하고,
                스스로 하나의 인스턴스를 생성하여 제공하는 형식
                인스턴스 생성 코스트를 줄일 수 있고, 메모리 낭비를 방지할 수 있으며,
                하나의 인스턴스로 데이터를 공유할 수 있다
            작성 요령
            1. 생성자를 private 로 작성
            2. 인스턴스 저장 필드를 static 으로 작성
            3. 인스턴스를 제공하는 메소드를 static 으로 작성
            4. 인스턴스 제공 메소드에서 인스턴스가 없을 때 생성하여 제공

예외 처리 (Exception Handling)
    예외 (Exception) 란?
        프로그램의 오류 (Error)
        1. 컴파일 오류(문법 오류) - 코드를 작성할 때 발생
                (컴파일이 안됨. 실행 안됨)
        2. 런타임 오류 (실행 오류) - 컴파일 완료 후
                실행 (run-time) 시 발생하는 오류
                Bug (버그) - 실행은 되지만 결과에 이상 발생
                Exception (예외) - 비정상적으로 종료
                            예방 코드로 수습 가능한 오류
    예외 처리란 예방 코드를 미리 작성하여 예외로 인한 비정상적인 종료를 막는 작업
    예외 처리용 명령어
    1. try : 예외 사항이 발생 할 수 있는 코드를 묶어놓은 영역
    2. catch : 발생된 예외사항에 대한 조치 명령문을 작성하는 영역
               비정상 종료를 회피할 수 있는 방안 제시
    3. finally : 예외와 상관없이 처리해야 할 명령을 작성하는 영역
                처리해야 할 명령이 없을 경우 생략

    문법)
    try {
        예외사항이 발생할 수 있는 코드 (문장들)
    } catch(예외사항 클래스1 참조변수) {
        예외사항 조치를 위한 명령 문장들(없을 수도 있ㄷ음)
    }[catch(예외사항 클래스2 참조 변수) {

    } ...
    finally {
        예외와 상관없이 실행문들
    }]

    1 try, many catch, 1 finally

Exception class : 모든 예외사항 클래스의 부모 클래스
    모든 예외사항을 담을 수 있는 클래스
    많은 catch 대신 Exceptoin 클래스 하나로 모든
    예외 사항을 처리할 수 있음

주요 예외사항 클래스
1. NumberFormatException : 문자열을 숫자로 변환할 때 발생
2. ArithmeticException : 산술 연산 시 발생 (0으로 나눌 때)
3. NullPointException : 참조 변수에 인스턴스가 없을 경우 발생
4. IndexOutOfBoundException : 배열읰 크기와 관련하여 발생
5. ClassNotFoundException : 인스턴스 생성에 필요한 클래스가 없을 때 발생
6. IOException : 입출력에 문제가 있을 때 발생 (파일 I/O)
7. SQLException : DB 연동 및 쿼리문 실행 시 발생

예외 처리 방식
1. 예외가 발생되는 메소드 내에서 처리를 완료하는 방식
2. 예외 처리를 호출한 메소드에 위임(떠넘김)하는 방식
    메소드 선언부에 위임할 예외사항을 명시
    형식>
    접근 제어자 반환형 메소드 이름(매개 변수 목록) throws 예외 클래스 {
    ...
    }
    여러 예외사항을 넘길 경우 : throw 예외 클래스1, 예외클래스2, ...
    모든 예외사항을 한번에 넘길 경우 : throws Exception

예외 사항 처리를 활용한 메시지 전달
    Exception 클래스를 상속받은 클래스를 작성
    throw 명령어 : 예외 인스턴스를 전송하는(던지는) 명령어

    호출한 메소드로부터 값을 전달받는 방법
    1. return : 하나의 변수에 저장된 데이터(묶음)만 전송
    2. 멤버 변수를 활용
    3. 예외 객체의 메시지(문자열 기준)
